const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();

exports.handler = async (event) => {
  const { register_id,registered_match_id, declarestatus } = event;
  let teamName = event.teamName;

  const calulateWinOrLoseObject = (currentObject, updateObject) => {
    return {
      amount: currentObject.amount + parseFloat(updateObject.amount),
      clientCommission: currentObject.clientCommission + parseFloat(updateObject.clientCommission),
       referralComission: currentObject.referralComission + parseFloat(updateObject.referralComission),
      client_name: currentObject.client_name,
      referral_name:currentObject.referral_name,
      refferal_id:currentObject.refferal_id,
    };
  };
  const calculateTotalAmount =  (currentObject, updateObject) => {
    return {
      amount: currentObject.amount + parseFloat(updateObject.amount),
      clientCommission: currentObject.clientCommission + parseFloat(updateObject.clientCommission),
      referralComission: currentObject.referralComission + parseFloat(updateObject.referralComission),
      // totalLossOrProfit: currentObject.totalLossOrProfit + parseFloat(updateObject.shareLossOrProfit || updateObject.totalLossOrProfit),
      upperLevalShare: currentObject.upperLevalShare + parseFloat(updateObject.upperLevalShare),
    };
  };
  const params = {
    TableName: 'registered_matches',
    KeyConditionExpression: 'register_id = :register_id AND registered_match_id = :registered_match_id',
    ExpressionAttributeValues: { ':register_id': register_id, ':registered_match_id': registered_match_id }
  };
  try {
    const data = await docClient.query(params).promise();
    let declaredUserReport = [];
    //console.log('data',data);
    if (data.Count > 0) {
      let register_match = data.Items[0];

      if (register_match.match_declared === 'Y') {
        return {
          statusCode: 404,
          error: 'true',
          message: 'Error: Match already declared'
        };
      }
      if(register_match.match_declared === 'MR') {
        let userReport = await getUserReportByMatch(register_id,registered_match_id);
        declaredUserReport = userReport.Items;
      }
      console.log("register_match",declaredUserReport)
      if(declarestatus=='cancelled' || declarestatus =='abandon') {
         let matchDetails =  await updateMatchDetails(register_id, registered_match_id, 'N/A', 'Y',0,declarestatus);
           await updateMatchInofflineMatchTableupdateMatchDetails(register_id, data.Items[0]?.match_id, 'N/A', 'Y',0,declarestatus)

         if(declaredUserReport.length >0) {
           await updateMatchReport(register_id,registered_match_id,declaredUserReport)
         }
        return {
          statusCode: 200,
          message: 'Sorry! match cancelled or abandon!',
          data: matchDetails
        };
      }
      let offline_fancy_data = await getMatchFancyData(register_id,register_match.registered_match_id);
       //console.log("offline_fancy_data",offline_fancy_data)
      if(offline_fancy_data.Count>0) {
        let findIndex = offline_fancy_data.Items.findIndex((item)=>(!item.fancy_status || item.fancy_status =='R' ));
        if(findIndex!=-1) {
            return {
          statusCode: 200,
          message: 'Please declare all the fancies before declaring the match',
          data: []
        };
        }
      }
      let match_entry_data = await getMatchEntryData(register_id,registered_match_id);
      // console.log("match_entry_data",match_entry_data)

      if (match_entry_data.Count > 0) {
        let matchEntryRecords = match_entry_data.Items;
        let client_object = {};
        let totalAmount = {};
        let matchEntryResult ={
              amount: 0,
              clientCommission: 0,
              clientShare: 0,
              referalShare: 0,
              referralComission: 0,
              totalLossOrProfit: 0,
              upperLevalShare: 0
              };
        let fancyEntryResult = {
              amount: 0,
              clientCommission: 0,
              clientShare: 0,
              referalShare: 0,
              referralComission: 0,
              totalLossOrProfit: 0,
              upperLevalShare: 0
              };
        for (let i = 0; i < matchEntryRecords.length; i++) {
          let matchEntryRecord = matchEntryRecords[i];

          if (!(register_match.team1 === teamName || register_match.team2 === teamName || declarestatus.toUpperCase()=='DRAW' )) {
            return {
              statusCode: 404,
              error: 'true',
              message: 'Invalid team name'
            };
          }
        if(declarestatus.toUpperCase() =='DRAW' ) {
          teamName = 'draw';
        }
          if (client_object[matchEntryRecord.client_id]) {
            if (matchEntryRecord.team === teamName) {
              client_object[matchEntryRecord.client_id]['matchEntryResult']['amount'] = client_object[matchEntryRecord.client_id]['matchEntryResult']['amount']+parseFloat(matchEntryRecord.riskObject.loseCalcultion.amount);
            } else {
                client_object[matchEntryRecord.client_id]['matchEntryResult']['amount'] = client_object[matchEntryRecord.client_id]['matchEntryResult']['amount']+parseFloat(matchEntryRecord.riskObject.winCalculation.amount);
             // matchEntryResult = await calculateTotalAmount(matchEntryResult,matchEntryRecord.riskObject.winCalculation);
            }
          } else {
            client_object[matchEntryRecord.client_id] ={'matchEntryResult': {
              amount: 0,
              client_name: matchEntryRecord.client_name,
              referral_name:matchEntryRecord.referral_name,
              refferal_id:matchEntryRecord.refferal_id,
            },'fancyEntryResult': {
              amount: 0,
              clientCommission: 0,
              clientShare: 0,
              referalShare: 0,
              referralComission: 0,
              totalLossOrProfit: 0,
              upperLevalShare: 0,
              client_name: matchEntryRecord.client_name,
              referral_name:matchEntryRecord.referral_name,
              refferal_id:matchEntryRecord.refferal_id,
            }};

            if (matchEntryRecord.team === teamName) {
              client_object[matchEntryRecord.client_id]['matchEntryResult']['amount'] = client_object[matchEntryRecord.client_id]['matchEntryResult']['amount']+parseFloat(matchEntryRecord.riskObject.loseCalcultion.amount);
            } else {
            client_object[matchEntryRecord.client_id]['matchEntryResult']['amount'] =  client_object[matchEntryRecord.client_id]['matchEntryResult']['amount']+parseFloat(matchEntryRecord.riskObject.winCalculation.amount);

            }
          }

        }

        // Fancy Records
        if (offline_fancy_data.Count > 0) {
          let offline_fancy_records = offline_fancy_data.Items;
          let fancy_records = await getFancyRecordsByMatch(register_id,register_match.registered_match_id);

          if (fancy_records.Count > 0) {
            let fancy_recordsObj = fancy_records.Items;

            for (let i = 0; i < fancy_recordsObj.length; i++) {
              let fancyEntry = fancy_recordsObj[i];

              let offline_fancy_record = offline_fancy_records.find((item) => {
                return item.match_fancy_id === fancyEntry.match_fancy_id;
              });
              if (offline_fancy_record && offline_fancy_record.fancy_status) {

                if (client_object[fancyEntry.client_id]) {
                  if (offline_fancy_record.fancy_status === fancyEntry.yN) {
                    client_object[fancyEntry.client_id]['fancyEntryResult'] = await calulateWinOrLoseObject(client_object[fancyEntry.client_id]['fancyEntryResult'], fancyEntry.riskObject.loseCalcultion);
                    fancyEntryResult = await calculateTotalAmount(fancyEntryResult,fancyEntry.riskObject.loseCalcultion);
                  } else {
                    client_object[fancyEntry.client_id]['fancyEntryResult'] = await calulateWinOrLoseObject(client_object[fancyEntry.client_id]['fancyEntryResult'], fancyEntry.riskObject.winCalculation);
                    fancyEntryResult = await calculateTotalAmount(fancyEntryResult,fancyEntry.riskObject.winCalculation);
                  }
                } else {
                    client_object[fancyEntry.client_id] ={'matchEntryResult': {
                amount: 0,

                client_name: fancyEntry.client_name,
                referral_name:fancyEntry.referral_name,
                refferal_id:fancyEntry.refferal_id,
              },'fancyEntryResult': {
                amount: 0,
                clientCommission: 0,
                clientShare: 0,
                referalShare: 0,
                referralComission: 0,
                totalLossOrProfit: 0,
                upperLevalShare: 0,
                client_name: fancyEntry.client_name,
                referral_name:fancyEntry.referral_name,
                refferal_id:fancyEntry.refferal_id,
              }};

                  if (offline_fancy_record.fancy_status === fancyEntry.yN) {
                    client_object[fancyEntry.client_id]['fancyEntryResult'] = await calulateWinOrLoseObject(client_object[fancyEntry.client_id]['fancyEntryResult'], fancyEntry.riskObject.loseCalcultion);
                    fancyEntryResult = await calculateTotalAmount(fancyEntryResult,fancyEntry.riskObject.loseCalcultion);
                  } else {
                    client_object[fancyEntry.client_id]['fancyEntryResult'] = await calulateWinOrLoseObject(client_object[fancyEntry.client_id]['fancyEntryResult'], fancyEntry.riskObject.winCalculation);
                    fancyEntryResult = await calculateTotalAmount(fancyEntryResult,fancyEntry.riskObject.winCalculation);
                  }

                }

              }
            }
          }
        }
         // console.log("declaredUserReport**",declaredUserReport);
        if(declaredUserReport.length >0) {
           await updateMatchReport(register_id,registered_match_id ,declaredUserReport)
         }
         //console.log("declaredUserReport",declaredUserReport);
        totalAmount =  await saveUserMatchDetails(register_id,registered_match_id,client_object,totalAmount,declaredUserReport);
         const exgistingId = await getAdminAccountId(register_id);
        if(totalAmount.totalLossOrProfit && +totalAmount.totalLossOrProfit > 0) {
          if (exgistingId.count === 0) {
            return {
              statusCode: 400,
              message: `${register_id} already existed`,
            };
          }

        if(exgistingId.Items[0].ul_commision) {
           totalAmount['platformCommission'] =   exgistingId.Items[0].ul_commision*totalAmount.totalLossOrProfit/100;
        }else {
           totalAmount['platformCommission'] =   0.1*totalAmount.totalLossOrProfit/100;
        }

       }else {
          totalAmount['platformCommission'] = 0;
       }
      let matchDetails =  await updateMatchDetails(register_id, registered_match_id, teamName, 'Y',totalAmount,declarestatus);
      await savePlatformCommissionToUsers(register_id, totalAmount['platformCommission'])
      await updateMatchInofflineMatchTableupdateMatchDetails(register_id, data.Items[0]?.match_id, teamName, 'Y',totalAmount,declarestatus)
        return {
          statusCode: 200,
          message: 'Winning team results',
          data: matchDetails
        };
      } else {
        return {
          statusCode: 404,
          error: 'true',
          message: 'Match details not found'
        };
      }
    } else {
      return {
        statusCode: 500,
        error: 'true',
        message: 'Error occurred'
      };
    }
  } catch (error) {
    console.error(error);
    return {
      statusCode: 500,
      error: 'true',
      message: 'Error occurred'
    };
  }
};
const getUserReportByMatch = async(register_id,match_id) => {
   const query = {
    TableName: 'user_match_report',
    FilterExpression:'match_id=:match_id',
    KeyConditionExpression: 'register_id = :register_id',
    ExpressionAttributeValues: { ':register_id':register_id,':match_id': match_id}
  };
  return docClient.query(query).promise();
}
const getFancyRecordsByMatch = async (register_id,match_id) => {
  const query = {
    TableName: 'fancy_entry',
    FilterExpression:'record_status=:record_status',
    KeyConditionExpression: 'register_id = :register_id AND begins_with(fancy_entry_id,:match_id)',
    ExpressionAttributeValues: { ':register_id':register_id,':match_id': match_id,':record_status':'active' }
  };
  return docClient.query(query).promise();
};

const getMatchFancyData = async (register_id,match_id) => {
  const query = {
    TableName: 'offline_match_fancy',
    KeyConditionExpression: 'register_id=:register_id AND begins_with(match_fancy_id, :match_id)',
    ExpressionAttributeValues: { ':register_id':register_id,':match_id': match_id }
  };
  return docClient.query(query).promise();
};

const getMatchEntryData = async (register_id,match_id) => {
  const query = {
    TableName: 'match_entry',
    FilterExpression:'record_status=:record_status',
    KeyConditionExpression: 'register_id=:register_id AND begins_with(match_entry_id,:match_id)',
    ExpressionAttributeValues: { ':register_id':register_id,':match_id': match_id,':record_status':'active' }
  };
  return docClient.query(query).promise();
};

const updateMatchReport = async(register_id,match_id,declaredUserReport) => {
  // const updateMatch= {
  //     TableName: 'user_match_report',
  //     FilterExpression:{
  //       'match_id':match_id
  //     },
  //     Key: {
  //       'register_id': register_id
  //     },
  //     UpdateExpression:'SET report_status =:status,updated_dt =:updated_dt',
  //     ExpressionAttributeValues:{
  //       ':status':'inactive',
  //       ':updated_dt':new Date().toDateString()
  //     }
  //   };
  //   console.log("updateMatchReport",updateMatch);
  //   await docClient.update(updateMatch).promise();
    const bulkUpdatePromises = declaredUserReport.map(async (item) => {
      // update each item with the private visibility

      await docClient
      .update({
        TableName: 'user_match_report',
          Key: {
      'register_id': register_id,
      'report_id': item.report_id
    },
        UpdateExpression: "SET report_status =:report_status,updated_dt =:updated_dt",
        ExpressionAttributeValues: {
         ':report_status':'inactive',
         ':updated_dt':new Date().toDateString()
        },
      })
      .promise();
  });
  // wait till bulk update is completed

await Promise.all(bulkUpdatePromises);
}
const saveUserMatchDetails = async (register_id, match_id, client_object,totalAmount,declaredUserReport) => {
  let insertArray = [];
  let keys = Object.keys(client_object);
  const { Items = [] } = await docClient
    .query({
      TableName: 'offline_users',
      KeyConditionExpression: "register_id=:register_id",
      ExpressionAttributeValues: {
        ":register_id":register_id,
      },
    })
    .promise();
  const filterRecords = Items.filter((item)=>keys.includes(item.client_id));
  //console.log('keys',keys);
    let grandTotal = {
        'clientShare':0,
        'referalShare':0,
        'betAmountWithClientFancyCommission':0,
        'betAmountWithReferralFancyCommission':0,
        'betAmount':0,
        'clientFancyComission':0,
        'totalBetAmountWithFancyCommissions':0,
        'clientComission':0,
        'referralComission':0,
        'referralFancyComission':0,
        'totalLossOrProfit':0,
        'referalNet':0,
        'clientNet':0

    }
  for (let i = 0; i < keys.length; i++) {
    let match_and_fancy_amount = client_object[keys[i]]['matchEntryResult'].amount
    +client_object[keys[i]]['fancyEntryResult'].amount;
    let matchOnlyAmount = client_object[keys[i]]['matchEntryResult'].amount;

    let fancyClientRollingComm = client_object[keys[i]]['fancyEntryResult'].clientCommission;
    let fancyClientComm = 0;
    let fancyRefComm = 0;

    let fancyRefRollingComm = client_object[keys[i]]['fancyEntryResult'].referralComission;

    let userDetails = filterRecords.find((item)=>item.client_id == keys[i]);
     let clientComission = 0;
     let referralComission =0;
      let withoutAllComission = 0;
    let clientComissionRate = parseFloat(userDetails.match_race_comm)>6?6: +parseFloat(userDetails.match_race_comm);
    let referalShareRate= +parseFloat(userDetails.referral_share);
    let clientShareRate =+parseFloat(userDetails.client_share);
    let referralComissionRate =  parseFloat(userDetails.referral_comm)>6?6: +parseFloat(userDetails.referral_comm);
    if(fancyClientRollingComm==0) {
        if(match_and_fancy_amount>0) {
        fancyClientComm =  parseFloat (-1*(client_object[keys[i]]['fancyEntryResult'].amount)*clientComissionRate/100).toFixed(2);
         clientComission = parseFloat (-1*(match_and_fancy_amount)*clientComissionRate/100).toFixed(2)
        }
    }else {
        if(matchOnlyAmount>0) {
         clientComission = parseFloat (-1*(matchOnlyAmount)*clientComissionRate/100).toFixed(2)
        }
    }

    if(fancyRefRollingComm==0) {
       if(match_and_fancy_amount>0) {
         referralComission = parseFloat (-1*(match_and_fancy_amount)*referralComissionRate/100).toFixed(2);
        fancyRefComm =  parseFloat (-1*(client_object[keys[i]]['fancyEntryResult'].amount)*referralComissionRate/100).toFixed(2);

        }
    }
    else {
       if(matchOnlyAmount>0) {
         referralComission = parseFloat (-1*(matchOnlyAmount)*referralComissionRate/100).toFixed(2)
        }
    }
 // console.log("match_and_fancy_amount",match_and_fancy_amount,"clientComission",clientComission,"fancyClientRollingComm",fancyClientRollingComm,"clientShareRate",clientShareRate);
     let clientShare= +parseFloat(-1*((match_and_fancy_amount + +clientComission+fancyClientRollingComm)*clientShareRate/100)).toFixed(2);
      let referalShare=+parseFloat((-1*(match_and_fancy_amount+ +referralComission+fancyRefRollingComm)*referalShareRate/100)).toFixed(2);

    client_object[keys[i]]['totalAmount'] = {
          betAmount:match_and_fancy_amount,
          clientFancyComission: +fancyClientRollingComm + +fancyClientComm,
          referralFancyComission: +fancyRefRollingComm + +fancyRefComm,
          betAmountWithClientFancyCommission: +match_and_fancy_amount + +fancyClientRollingComm + +clientComission,
          betAmountWithReferralFancyCommission: +match_and_fancy_amount + +fancyRefRollingComm + +referralComission,
          clientShare:clientShare,
          referalShare:referalShare,
          clientComission: +clientComission + +fancyClientRollingComm,
          referralComission: +referralComission + +fancyRefRollingComm,
          clientNet: +match_and_fancy_amount + +clientShare + +clientComission + +fancyClientRollingComm,
          referalNet: +referalShare + +referralComission + +fancyRefRollingComm,
          totalLossOrProfit: +match_and_fancy_amount + +clientShare + +clientComission+ +fancyClientRollingComm
          + +referalShare + +referralComission + +fancyRefRollingComm,
          amount:match_and_fancy_amount,
          client_name:  client_object[keys[i]]['matchEntryResult'].client_name || client_object[keys[i]]['fancyEntryResult'].client_name  ,
          referral_name: client_object[keys[i]]['matchEntryResult'].client_name || client_object[keys[i]]['fancyEntryResult'].client_name  ,
          refferal_id: client_object[keys[i]]['matchEntryResult'].client_name || client_object[keys[i]]['fancyEntryResult'].client_name
    }
    grandTotal = {
        'clientShare':grandTotal.clientShare + +clientShare,
        'referalShare':grandTotal.referalShare + +referalShare,
        'betAmountWithClientFancyCommission':grandTotal.betAmountWithClientFancyCommission
        + +match_and_fancy_amount + +fancyClientRollingComm + +clientComission,
        'betAmountWithReferralFancyCommission':grandTotal.betAmountWithReferralFancyCommission
        + +match_and_fancy_amount + +fancyRefRollingComm + +referralComission,
        'betAmount':grandTotal.betAmount + +match_and_fancy_amount,
        'clientFancyComission':grandTotal.clientFancyComission + +fancyClientRollingComm + +fancyClientComm,
        'referralFancyComission':grandTotal.referralFancyComission + +fancyRefRollingComm + +fancyRefComm,
        'totalBetAmountWithFancyCommissions':grandTotal.totalBetAmountWithFancyCommissions + +fancyClientRollingComm
        + +fancyRefRollingComm + +fancyClientComm + +fancyRefComm,
        'referralComission':grandTotal.referralComission + +referralComission + +fancyRefRollingComm,
        'clientComission':grandTotal.clientComission + +clientComission,
        'totalLossOrProfit':grandTotal.totalLossOrProfit + +match_and_fancy_amount+ +clientShare + +clientComission + +fancyClientRollingComm
          + +referalShare + +referralComission + +fancyRefRollingComm,
        'referalNet':grandTotal.referalNet + +referalShare + +referralComission + +fancyRefRollingComm,
        'clientNet':grandTotal.clientNet + +match_and_fancy_amount + +clientShare + +clientComission + +fancyClientRollingComm,

    }
    // console.log("client_object[keys[i]",client_object[keys[i]]);
    // console.log("grandTotal",grandTotal);
    insertArray.push({
      PutRequest: {
        Item: {
          report_id: keys[i]+'-'+'rpt-id' + new Date().valueOf(),
          ...client_object[keys[i]]['totalAmount'],
          matchEntryResult:client_object[keys[i]].matchEntryResult,
          fancyEntryResult:client_object[keys[i]].fancyEntryResult,
          report_status:'active',
          client_id: keys[i],
          match_id: match_id,
          created_date: new Date().toDateString(),
          created_dt: new Date().getTime(),
          register_id: register_id,
        }
      }
    });
  }


// console.log('result',insertArray[0].PutRequest['Item']);
// console.log('result',insertArray[1].PutRequest['Item']);

  await docClient.batchWrite({ RequestItems: { user_match_report: insertArray } }).promise();


  const bulkUpdatePromises = filterRecords.map(async (item) => {
      // update each item with the private visibility
       let client_amount = +client_object[item.client_id]['totalAmount']['clientNet'];
       let refferalTotalCommission = +client_object[item.client_id]['totalAmount']['referralComission'];
        let refferalTotalShare = +client_object[item.client_id]['totalAmount']['referalShare'];
        let referralTotalNet = +client_object[item.client_id]['totalAmount']['referalNet'];
       //console.log("client_amount",client_amount,typeof client_amount)
    let existingClientData = declaredUserReport?.find((item1)=> item1.client_id == item.client_id );
       // console.log('item',item);
      // if(existingClientData) {
      //   client_amount = client_amount-(existingClientData.amount -existingClientData.clientShare-existingClientData.clientCommission);
      // }
      // console.log("item.pending_amount",client_amount
      // ,+item.pending_amount ? +parseFloat(item.pending_amount)+client_amount: +client_amount);
      await docClient
      .update({
        TableName: 'offline_users',
          Key: {
      'register_id': register_id,
      'client_id': item.client_id
    },
        UpdateExpression: "SET total_amount = :totalAmount,pending_amount=:pendingAmount",
        ExpressionAttributeValues: {
          ":totalAmount": +item.total_amount ? (+item.total_amount + +client_amount) : +client_amount,
          ":pendingAmount":+item.pending_amount ? (+parseFloat(item.pending_amount)+ +client_amount) : +client_amount,
          // ":referralTotalCommission":+item.referralTotalcommission ?
          // (+parseFloat(item.referralTotalCommission)+ +refferalTotalCommission) : +refferalTotalCommission,
          // ":referralTotalShare":+item.referralTotalShare ?
          // (+parseFloat(item.referralTotalShare)+ +refferalTotalShare) : +refferalTotalShare,
          // ":referralTotalNet":+item.referralTotalNet ?
          // (+parseFloat(item.referralTotalNet)+ +referralTotalNet) : +referralTotalNet,
        },
      })
      .promise();
  });
  // wait till bulk update is completed

await Promise.all(bulkUpdatePromises);
await updateRefferalDetails(register_id,client_object,declaredUserReport,keys);
return grandTotal;
};

const updateRefferalDetails = async(register_id,client_object,declaredUserReport,clientIds) => {
    let clientArray = Object.values(client_object);
    let filterObject = {};
    for(let i =0;i<clientArray.length;i++) {
        let clientObj = clientArray[i];
         let existingClientData = declaredUserReport?.find((item)=> clientIds.includes(item.client_id) );
        if(filterObject[clientObj.refferal_id]) {
            filterObject[clientObj.refferal_id]['referralComission'] =
            filterObject[clientObj.refferal_id]['referralComission'] +clientObj.referralComission;
            filterObject[clientObj.refferal_id]['referalShare'] =
            filterObject[clientObj.refferal_id]['referalShare'] +clientObj.referalShare;
            filterObject[clientObj.refferal_id]['totalProfitOrLoss'] =
            filterObject[clientObj.refferal_id]['totalProfitOrLoss']+clientObj.referalShare+clientObj.referralComission;
        }else {
              if(existingClientData){
              filterObject[clientObj.refferal_id] = {
                'referralComission':clientObj.referralComission-existingClientData.referralComission,
                'referalShare':clientObj.referalShare-existingClientData.referalShare,
                'totalProfitOrLoss':(clientObj.referralComission+clientObj.referalShare)-(existingClientData.referalShare
                +existingClientData.referralComission)
            };
          }else {
              filterObject[clientObj.refferal_id] = {
                'referralComission':clientObj.referralComission,
                'referalShare':clientObj.referalShare,
                'totalProfitOrLoss':(clientObj.referralComission+clientObj.referalShare)
            };
          }
        }
    }
    if(filterObject) {
        let keys = Object.keys(filterObject);
        const { Items = [] } = await docClient
        .query({
          TableName: 'offline_refferal',
          KeyConditionExpression: "register_id=:register_id",
          ExpressionAttributeValues: {
            ":register_id":register_id,
          },
        })
        .promise();
        const filterRecords = Items.filter((item)=>keys.includes(item.refferal_id));
        const bulkUpdatePromises = filterRecords.map(async (item) => {
            // update each item with the private visibility
            await docClient
            .update({
              TableName: 'offline_refferal',
                Key: {
            'register_id': register_id,
            'refferal_id': item.refferal_id
          },
              UpdateExpression: "SET total_profit_or_loss = :totalAmount,pending_amount=:pendingAmount,share=:share,comission=:comission",
              ExpressionAttributeValues: {
                ":totalAmount": item.total_profit_or_loss?item.total_profit_or_loss+filterObject[item.refferal_id]['totalProfitOrLoss']:filterObject[item.refferal_id]['totalProfitOrLoss'],
                ":pendingAmount":item.pending_amount ? item.pending_amount+filterObject[item.refferal_id]['totalProfitOrLoss']:filterObject[item.refferal_id]['totalProfitOrLoss'],
                ":comission":item.comission?item.comission+filterObject[item.refferal_id]['referralComission']:filterObject[item.refferal_id]['referralComission'],
                ":share":item.share? +item.share + +filterObject[item.refferal_id]['referalShare']: filterObject[item.refferal_id]['referalShare']
              },
            })
            .promise();
        });
        // wait till bulk update is completed

      return Promise.all(bulkUpdatePromises);
    }
};
const updateMatchDetails = async (register_id, registered_match_id, team, status,totalAmount,result_status) => {
  const query = {
    TableName: 'registered_matches',
    Key: {
      register_id: register_id,
      registered_match_id: registered_match_id
    },
    UpdateExpression: 'SET match_declared = :status,winTeam=:team, totalAmount =:totalAmount, result_status =:result_status',
    ExpressionAttributeValues: {
      ':status': status,
      ":team":team,
      ":totalAmount":totalAmount,
      ":result_status":result_status
    },
    ReturnValues: 'ALL_NEW'
  };
  return docClient.update(query).promise();
};

const getAdminAccountId = (register_id) => {
  const query = {
    TableName: "admin_accounts",
    KeyConditionExpression: `register_id = :registerIdValue and p_id = :pIdValue`,
    ExpressionAttributeValues: {
      ":registerIdValue": register_id,
      ":pIdValue": "1",
    },
  };
  return docClient.query(query).promise();
};

const updateMatchInofflineMatchTableupdateMatchDetails = async (register_id, match_id, team, status,totalAmount,result_status) => {
  //console.log({register_id, match_id})
  const query = {
    TableName: 'offline_matches',
    Key: {
      register_id: register_id,
      match_id: match_id,
    },
    UpdateExpression: 'SET match_declared = :status',
    ExpressionAttributeValues: {
      ':status': status,
    },
    ReturnValues: 'ALL_NEW'
  };
  return docClient.update(query).promise();
};

const savePlatformCommissionToUsers = async (register_id, platformCommission) => {
  console.log({register_id, platformCommission})
  const query = {
    TableName: 'offline_users',
    KeyConditionExpression: "register_id=:register_id",
    ExpressionAttributeValues: {
      ':register_id': register_id,
    },
  };
  const userDetails =  await docClient.query(query).promise();
  console.log("userDetails for platformCommission", userDetails);
  const totalPlatformNet = (+userDetails?.Items[0]?.totalPlatformNet || 0) + +platformCommission;
  //const report_id = userDetails?.Items[0]?.report_id
  const params = {
  TableName: 'offline_users',
    Key: {
      register_id: register_id,
       client_id: userDetails?.Items[0].client_id
    },
    UpdateExpression: 'SET totalPlatformNet =:totalPlatformNet',
    ExpressionAttributeValues: {
      ':totalPlatformNet': totalPlatformNet
      // ':register_id': register_id,
      // ":report_id": report_id
    },
    ReturnValues: 'ALL_NEW'
  };
  return await docClient.update(params).promise();
};
